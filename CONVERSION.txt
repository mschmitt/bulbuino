Video Conversion Notes
----------------------

These are my notes for converting image series taken using Bulbuino++ as a
serial photo robot into videos. 

It's an Open Source workflow using http://mjpeg.sf.net, with nice UNIX-style 
pipelining between the different conversion tools. 

When playing a lot with the different conversion options, it might be useful
to redirect the stream generated from jpeg2yuv to a file, making it more
quickly accessible for later scaling and encoding experiments.

720p High Definition
--------------------

I shoot photos that can be scaled down to 1280x720, or that can be cropped 
to the desired format.

My input photos for 720p are in "Small JPEG" mode from the Canon 350D, 
1728x1152 pixels.

Basic conversion:

- Pipe a list of photo filenames through jpeg2yuv and view immediately. Be
  advised that yuvplay is a slow real-time preview.
  $ ls */*JPG | jpeg2yuv -f 25 -I p | yuvplay
  (-f is frame rate, -I is interlacing mode)

- Scale down to 720p size before viewing:
  $ ls */*JPG | jpeg2yuv -f 25 -I p | yuvscaler -O SIZE_1280x720 | yuvplay
  This produces a 1080x720 version, without black bars.

- Add conversion ratio: RATIO_WidthIn_WidthOut_HeightIn_HeightOut
  $ ls */*JPG | jpeg2yuv -f 25 -I p | 
    yuvscaler -M RATIO_1728_1080_1152_720 -O SIZE_1280x720 | 
    yuvplay
  This produces a 1280x720 version with black bars left & right.

- Pipe through actual MPEG conversion:  
  $ ls */*JPG | jpeg2yuv -f 25 -I p | 
    yuvscaler -M RATIO_1728_1080_1152_720 -O SIZE_1280x720 | 
    mpeg2enc -f 12 -o timelapse2.m1v
  (-f 12 is the preset for 720p.)

This way, I'll have a video that will maintain correct aspect ratio, but
with black bars left&right sides, which will build up to a black frame around
the video, if viewed in a letterbox format. It is better to crop the image
while scaling:

Input ratio: 3:2
Input format: 1728x1152
Output ratio: 16:9.
Output format: 1280x720

3/2  = 27/18
16/9 = 32/18   
-->> The output format is wider, so I will crop the input image at top
     and bottom.

The target width is 1280, so I'll calculate the desired raw image height 
from that:

h = (1728 * 720) / 1280 = 972

I will crop (1152-972)/2 = 90 pixels each from the top and bottom:

- Crop input with the USE_WidthxHeight+WidthOffset+HeightOffset keyword:
  $ ls */*JPG | jpeg2yuv -f 25 -I p | 
    yuvscaler -I USE_1728x972+0+90 -O SIZE_1280x720 | 
    mpeg2enc -f 12 -o timelapse2.m1v

Overdub with audio: 

- Prepare an audio track that is as long as the video, save in MP2 format, 
  e.g. as soundtrack.mp2 with 384k bitrate and without tags.

- Take bitrate from Video (-f 12 -> 19400) and bitrate from MP2 (as saved,
  e.g. 384), add them, add 1% --> (19400 + 384) * 1.01 = 19982

- Mux audio and video:
  $ mplex -V -b 1000,1000 -r 19982 soundtrack.mp2 timelapse2.m1v \
    -o timelapse.mpeg
  (-V is variable bitrate; -r is bitrate as calculated beforehand, -b
  is the video buffer size to be used, in KB.)

-> Done. Enjoy your 720p HD video. :-)

Quicktime:

- If you would rather edit the mute video file in iMovie:
  yuv2lav -o timelapse.qt -b 1000 -f q -q 100 < timelapse.yuv
  (-b is the size of the JPEG conversion buffer, -f q is quicktime 
  output format, -q is JPEG compression quality 100%.)

